// Apply the java plugin to add support for Java
plugins{
	id 'java'
	id 'eclipse'
	id 'org.hidetake.ssh' version '2.7.0'
}

// #### load remotes-configuration ####
// example: 
// remotes {
//     testvm {
//         host = '127.0.0.1'
//         user = System.properties['user.name']
//         identity = file("${System.properties['user.home']}/.ssh/id_rsa")
//     }
// }
if (file('remotes').exists())
	apply from: "remotes"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
	maven { url "http://repo.maven.apache.org/maven2" }
	jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources{
        	srcDirs = ['src']
        }
    }
}
// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    
    // https://mvnrepository.com/artifact/com.rabbitmq/amqp-client
	compile group: 'com.rabbitmq', name: 'amqp-client', version: '3.6.5'
	
	// https://mvnrepository.com/artifact/org.influxdb/influxdb-java
	compile group: 'org.influxdb', name: 'influxdb-java', version: '2.3'
	
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.3'
	
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    // testCompile 'junit:junit:4.12'
    
}
task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

task showPlatformVersion << {
    println ssh.version
    ssh.run {
        session(remotes.testvm) {
            execute 'uname -a'
            execute 'cat /etc/*-release', ignoreError: true
        }
    }
}

task buildMwrp(type: Jar) {
    manifest { 
    	attributes "Main-Class": "com.hawhamburg.sg.mwrp.Mwrp"
  	}  
	baseName = 'mwrp'
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
	with jar
}

task deployMwrp(dependsOn: buildMwrp) << {
	ssh.run {
        session(remotes.testvm) {
			def deployPath = '/home/rztmk/build/'
			jar.baseName = 'Mwrp'
			execute 'mkdir -p ' + deployPath
			put from: jar.archivePath.path , into: deployPath + jar.archiveName
			def result = execute 'cd ' + deployPath + '; java -jar ' + jar.archiveName + ' &'
			println ""
			println result
			println ""
        }
    }
}

task deployMwrpToChairAndStart2(dependsOn: buildMwrp) << {
	ssh.run {
        session(remotes.chair2) {
			def deployPath = '/home/chair/'
			jar.baseName = 'mwrp'
			execute 'pkill -f ' + jar.archiveName, ignoreError: true
			execute 'mkdir -p ' + deployPath
			put from: jar.archivePath.path , into: deployPath + jar.archiveName
			execute 'cd ' + deployPath
			def result= execute 'export DISPLAY=:0; java -jar ' + jar.archiveName + ' -gui -noserver -gctrl 2>1&'
			println ""
			println result
			println ""
        }
    }
}

task deployMwrpToChair2(dependsOn: buildMwrp) << {
	ssh.run {
        session(remotes.chair2) {
			def deployPath = '/home/chair/'
			jar.baseName = 'mwrp'
			execute 'pkill -f ' + jar.archiveName + " < /dev/null > /dev/null 2> /dev/null", ignoreError: true
			execute 'mkdir -p ' + deployPath+ " < /dev/null > /dev/null 2> /dev/null"
			put from: jar.archivePath.path , into: deployPath + jar.archiveName
        }
    }
}

task buildDBConnect(type: Jar) {
    manifest { 
    	attributes "Main-Class": "de.hawhamburg.sg.db.DBConnector"
  	}  
	baseName = 'DBConnect'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

task deployDBConnect(dependsOn: buildDBConnect) << {
	ssh.run {
        session(remotes.testvm) {
			def deployPath = '/home/rztmk/build/'
			jar.baseName = 'DBConnect'
			execute 'pkill -f ' + jar.archiveName, ignoreError: true
			execute 'mkdir -p ' + deployPath
			put from: jar.archivePath.path , into: deployPath + jar.archiveName
			def result = execute 'cd ' + deployPath + '; java -jar ' + jar.archiveName + ' &'
			println ""
			println result
			println ""
        }
    }
}

task buildTestDataGen(type: Jar) {
    manifest { 
    	attributes "Main-Class": "com.hawhamburg.sg.debug.DebugDataGenerator"
  	}  
	baseName = 'DebugDataGen'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

task deployTestDataGen(dependsOn: buildTestDataGen) << {
	ssh.run {
        session(remotes.testvm) {
			def deployPath = '/home/rztmk/build/'
			jar.baseName = 'DebugDataGen'
			execute 'mkdir -p ' + deployPath
			put from: jar.archivePath.path , into: deployPath + jar.archiveName
			def result = execute 'cd ' + deployPath + '; java -jar ' + jar.archiveName
			println ""
			println result
			println ""
        }
    }
}